import React from "react";
import { cn } from "@/lib/utils"; // Assuming you have this utility

interface CustomIconProps extends React.SVGProps<SVGSVGElement> {
  size?: number | string;
  // color prop will map to 'fill' because the original SVG uses fill
  color?: string;
  // strokeWidth is not directly applicable as the original uses fill, but kept for API similarity
  strokeWidth?: number | string;
}

export const TicketIcon: React.FC<CustomIconProps> = ({
  size = 24, // Default size like lucide icons
  color = "currentColor", // Default color like lucide icons (will be used for fill)
  className,
  ...props // Pass other SVG props like style, etc.
}) => {
  const width = typeof size === "string" ? size : `${size}px`;
  const height = typeof size === "string" ? size : `${size}px`;

  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 31 32" // Keep original viewBox for scaling
      fill="none" // Set base fill to none, path will override
      xmlns="http://www.w3.org/2000/svg"
      className={cn(className)}
      {...props}
    >
      <path
        d="M30.5935 11.1917L27.7492 8.34735C27.5197 8.12097 27.2137 7.98877 26.8916 7.97684C26.5695 7.96491 26.2546 8.07411 26.009 8.2829C25.6298 8.60564 25.1432 8.77416 24.6456 8.75506C24.1481 8.73596 23.6759 8.53063 23.3225 8.17977C22.9719 7.8265 22.7667 7.3544 22.7476 6.85699C22.7285 6.35958 22.8969 5.87314 23.2194 5.49401C23.4282 5.24841 23.5374 4.9335 23.5255 4.61137C23.5135 4.28923 23.3814 3.98326 23.155 3.75378L20.3081 0.90624C20.0675 0.666113 19.7415 0.53125 19.4015 0.53125C19.0616 0.53125 18.7356 0.666113 18.495 0.90624L13.9607 5.43987C13.6808 5.72086 13.4697 6.06278 13.3439 6.4389C13.3194 6.51121 13.2786 6.57692 13.2246 6.63091C13.1706 6.68489 13.1049 6.72572 13.0326 6.7502C12.6563 6.876 12.3144 7.08736 12.0336 7.36767L0.40624 18.995C0.166113 19.2356 0.03125 19.5616 0.03125 19.9015C0.03125 20.2415 0.166113 20.5675 0.40624 20.8081L3.25378 23.6524C3.48326 23.8788 3.78923 24.011 4.11137 24.0229C4.4335 24.0348 4.74841 23.9256 4.99401 23.7168C5.37228 23.3915 5.85952 23.2211 6.35811 23.2398C6.85669 23.2585 7.32979 23.465 7.68259 23.8178C8.03539 24.1706 8.24184 24.6437 8.26056 25.1423C8.27928 25.6409 8.1089 26.1281 7.78354 26.5064C7.57475 26.752 7.46556 27.0669 7.47749 27.389C7.48942 27.7112 7.62161 28.0171 7.848 28.2466L10.6923 31.0909C10.9329 31.3311 11.2589 31.4659 11.5988 31.4659C11.9388 31.4659 12.2648 31.3311 12.5054 31.0909L24.1327 19.4636C24.4129 19.183 24.6243 18.8412 24.7502 18.4652C24.7746 18.3927 24.8154 18.3267 24.8695 18.2726C24.9237 18.2185 24.9896 18.1776 25.0621 18.1533C25.4381 18.0275 25.7798 17.8164 26.0605 17.5364L30.5942 13.0022C30.8334 12.7616 30.9677 12.4361 30.9675 12.0968C30.9674 11.7575 30.8329 11.4321 30.5935 11.1917ZM15.8743 9.28063C15.7786 9.37642 15.6649 9.4524 15.5398 9.50424C15.4146 9.55608 15.2805 9.58276 15.1451 9.58276C15.0096 9.58276 14.8755 9.55608 14.7504 9.50424C14.6252 9.4524 14.5115 9.37642 14.4158 9.28063L13.6739 8.53878C13.4852 8.34441 13.3806 8.0836 13.3826 7.81271C13.3847 7.54182 13.4932 7.28262 13.6848 7.09111C13.8764 6.8996 14.1357 6.79117 14.4065 6.78925C14.6774 6.78733 14.9382 6.89208 15.1325 7.08085L15.8743 7.82206C15.9701 7.91782 16.0461 8.03152 16.098 8.15665C16.1498 8.28178 16.1765 8.4159 16.1765 8.55135C16.1765 8.68679 16.1498 8.82091 16.098 8.94604C16.0461 9.07118 15.9701 9.18487 15.8743 9.28063ZM18.7103 12.1166C18.5169 12.3098 18.2547 12.4184 17.9813 12.4184C17.7079 12.4184 17.4457 12.3098 17.2524 12.1166L16.5434 11.4076C16.3499 11.2142 16.2413 10.9518 16.2413 10.6783C16.2413 10.4048 16.3499 10.1424 16.5434 9.94901C16.7368 9.75559 16.9991 9.64693 17.2727 9.64693C17.5462 9.64693 17.8085 9.75559 18.0019 9.94901L18.7109 10.658C18.807 10.7538 18.8833 10.8675 18.9354 10.9928C18.9875 11.1181 19.0143 11.2524 19.0143 11.3881C19.0144 11.5238 18.9877 11.6581 18.9357 11.7835C18.8838 11.9088 18.8076 12.0227 18.7116 12.1185L18.7103 12.1166ZM21.5462 14.9525C21.4505 15.0483 21.3368 15.1243 21.2116 15.1761C21.0865 15.228 20.9524 15.2546 20.8169 15.2546C20.6815 15.2546 20.5474 15.228 20.4222 15.1761C20.2971 15.1243 20.1834 15.0483 20.0876 14.9525L19.3787 14.2435C19.19 14.0492 19.0853 13.7883 19.0874 13.5175C19.0894 13.2466 19.198 12.9874 19.3896 12.7959C19.5812 12.6043 19.8404 12.4959 20.1113 12.494C20.3822 12.4921 20.6429 12.5968 20.8372 12.7856L21.5462 13.4946C21.6426 13.5902 21.7192 13.7039 21.7715 13.8291C21.8239 13.9544 21.851 14.0887 21.8513 14.2245C21.8516 14.3602 21.825 14.4947 21.7733 14.6202C21.7215 14.7457 21.6454 14.8597 21.5494 14.9557L21.5462 14.9525ZM24.4099 17.8233C24.3141 17.919 24.2004 17.995 24.0753 18.0469C23.9501 18.0987 23.816 18.1254 23.6806 18.1254C23.5451 18.1254 23.411 18.0987 23.2859 18.0469C23.1608 17.995 23.0471 17.919 22.9513 17.8233L22.214 17.082C22.1162 16.9866 22.0383 16.8726 21.985 16.7468C21.9316 16.6209 21.9038 16.4858 21.9031 16.3491C21.9025 16.2124 21.929 16.077 21.9812 15.9506C22.0333 15.8243 22.1101 15.7096 22.2069 15.6132C22.3038 15.5168 22.4189 15.4406 22.5455 15.389C22.6721 15.3375 22.8076 15.3116 22.9443 15.3129C23.081 15.3143 23.216 15.3427 23.3416 15.3967C23.4672 15.4507 23.5807 15.5291 23.6758 15.6273L24.4137 16.3679C24.5095 16.4637 24.5854 16.5774 24.6372 16.7026C24.689 16.8277 24.7156 16.9619 24.7155 17.0973C24.7155 17.2328 24.6887 17.3669 24.6369 17.492C24.585 17.6171 24.5089 17.7308 24.4131 17.8265L24.4099 17.8233Z"
        fill={color} // Use the color prop for fill
      />
    </svg>
  );
};

export const NailIcon: React.FC<CustomIconProps> = ({
  size = 60, // Default height to match original aspect ratio base
  className,
  ...props // Pass other SVG props
}) => {
  // Calculate width/height, maintaining aspect ratio (230:60) based on height (size)
  const height = typeof size === "string" ? size : `${size}px`;
  // Calculate width proportionally: width = height * (230 / 60)
  const width =
    typeof size === "string"
      ? `calc(${size} * (230 / 60))` // Let CSS handle calc if size is string
      : `${(size * 230) / 60}px`;

  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 230 60" // Crucial: Use the original viewBox
      fill="none" // Base fill is none
      xmlns="http://www.w3.org/2000/svg"
      className={cn("inline-block", className)} // Basic layout + custom classes
      aria-hidden="true"
      focusable="false"
      {...props}
    >
      {/* Background Rectangle - Uses its original fixed color */}
      <rect width="230" height="60" rx="10" fill="#F07706" />

      {/* Foreground Path (Text/Shape) - Uses its original fixed color */}
      <path
        d="M60.1796 51.5L36.9216 28.3V51.5H19.6376V8.348H37.6176L59.7736 30.446V8.348H77.0576V51.5H60.1796ZM116.114 34.216L110.198 21.108L104.224 34.216H116.114ZM124.002 51.5L121.044 45.062H99.2942L96.3362 51.5H78.6462L99.1202 8.348H122.03L142.736 51.5H124.002ZM161.998 8.348V51.5H144.308V8.348H161.998ZM168.949 8.348H186.639V38.044H212.159V51.5H168.949V8.348Z"
        fill="white" // Fixed fill color from original SVG
      />
    </svg>
  );
};

export const MomentIcon: React.FC<CustomIconProps> = ({
  size = 43,
  className,
  ...props
}) => {
  // Calculate width/height, maintaining aspect ratio (358:43) based on height (size)
  const height = typeof size === "string" ? size : `${size}px`;
  // Calculate width proportionally: width = height * (358 / 43)
  const width =
    typeof size === "string"
      ? `calc(${size} * (358 / 43))`
      : `${(size * 358) / 43}px`;

  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 358 43"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("inline-block", className)}
      aria-hidden="true"
      focusable="false"
      {...props}
    >
      <path
        d="M0.381127 41.356V1.17996H23.3851L33.1591 21.754L43.0411 1.17996H65.2891V41.356H49.0891V16.948L37.3711 41.356H27.9211L16.2571 16.948V41.356H0.381127ZM96.7876 0.477955H99.2716C122.222 0.477955 126.11 12.304 126.11 20.35V21.97C126.11 29.908 122.276 42.058 99.2716 42.058H96.7876C73.9456 42.058 70.0036 29.908 70.0036 21.97V20.35C70.0576 12.304 73.9456 0.477955 96.7876 0.477955ZM108.83 20.782C108.83 17.596 107.534 12.358 98.0296 12.358C88.4176 12.358 87.2296 17.596 87.2296 20.782V21.322C87.2296 24.616 88.6336 29.962 98.0836 29.962C107.534 29.962 108.83 24.616 108.83 21.322V20.782ZM130.797 41.356V1.17996H153.801L163.575 21.754L173.457 1.17996H195.705V41.356H179.505V16.948L167.787 41.356H158.337L146.673 16.948V41.356H130.797ZM202.202 1.17996H244.214V11.44H218.726V15.76H243.404V26.29H218.726V30.988H244.592V41.356H202.202V1.17996ZM287.833 41.356L266.179 19.756V41.356H250.087V1.17996H266.827L287.455 21.754V1.17996H303.547V41.356H287.833ZM324.628 41.356V13.33H308.212V1.17996H357.46V13.33H341.044V41.356H324.628Z"
        fill="white" // Fixed fill color from original SVG
      />
    </svg>
  );
};
